{
	"name":"Guzzle Encoding.com",
	"apiVersion":"1.1",
	"description":"Guzzle Encoding.com XML API Client",
	"operations":{
		"AddMedia":{
			"httpMethod":"GET",
			"summary":"Add new media to user's queue. Creates new items in a queue according to formats specified in the XML API request.",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"action":{
					"description":"The action to be performed in the API request.",
					"type":"string"
				},
				"source":{
					"description":"Source media file. Must be specified only for AddMedia and AddMediaBenchmark actions.",

					"required": true
				},
				"format":{
					"description":"",
					"type":"array",
					"required": true
				},
				"region":{
					"description":"",
					"type":"string"
				},
				"notify":{
					"description":"Can be either an HTTP(S) URL for the script with which the result will be posted, or a mailto: link with email address for which the result info will be sent.",
					"type":"string"
				},
				"notify_encoding_errors":{
					"description":"Can be either an HTTP(S) URL for the script or a mailto: link with email address for which result info will be sent only if media finished with encoding errors.",
					"type":"string"
				},
				"split_screen":{
					"description":"",
					"type":"string"
				}
			}

		},
		"AddMediaBenchmark":{
			"httpMethod":"POST",
			"summary":"Add new media to user's queue and sets a flag to NOT process automatically after downloading. Format fields can be specified as well. If NotifyURL is set, a notification will be sent after the media is ready for processing.",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"action":{
					"description":"The action to be performed in the API request.",
					"type":"string"
				},
				"source":{
					"description":"Source media file. Must be specified only for AddMedia and AddMediaBenchmark actions.",
					"type":"string",
					"required": true
				},
				"format":{
					"description":"",
					"type":"array",
					"required": true
				},
				"region":{
					"description":"",
					"type":"string"
				},
				"notify":{
					"description":"Can be either an HTTP(S) URL for the script with which the result will be posted, or a mailto: link with email address for which the result info will be sent.",
					"type":"string"
				},
				"notify_encoding_errors":{
					"description":"Can be either an HTTP(S) URL for the script or a mailto: link with email address for which result info will be sent only if media finished with encoding errors.",
					"type":"string"
				},
				"split_screen":{
					"description":"",
					"type":"string"
				}
			}

		},
		"UpdateMedia":{
			"httpMethod":"POST",
			"summary":"Replace information about existing media's formats. All old format items will be deleted and the new ones will be added.",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"mediaid":{
					"description":"A unique identifier for each media. This field must be specified for the following actions: UpdateMedia, ProcessMedia, CancelMedia, GetMediaInfo, GetStatus.",
					"type":"integer",
					"required": true
				}
			}

		},
		"ProcessMedia":{
			"httpMethod":"POST",
			"summary":"Start encoding the previously downloaded media (ones that have been added with an AddMediaBenchmark action).",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"mediaid":{
					"description":"A unique identifier for each media.",
					"type":"integer",
					"required": true
				}
			}

		},
		"CancelMedia":{
			"httpMethod":"POST",
			"summary":"Delete specified media and all its items in the queue.",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"mediaid":{
					"description":"A unique identifier for each media.",
					"type":"integer",
					"required": true
				}
			}

		},
		"GetMediaList":{
			"httpMethod":"POST",
			"summary":"Returns a list of the user's media in the queue.",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{

			}

		},
		"GetStatus":{
			"httpMethod":"POST",
			"summary":"Returns information about a selected user's media and all its items in the queue.",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"mediaid":{
					"description":"A unique identifier for each media.",
					"type":"integer",
					"required": true
				},
				"extended":{
					"description":"Extended Info",
					"type":"string",
					"default":"no"
				}

			}

		},
		"GetMediaInfo":{
			"httpMethod":"POST",
			"summary":"Returns video parameters of the specified media when available.",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"mediaid":{
					"description":"A unique identifier for each media.",
					"type":"integer",
					"required": true
				}
			}

		},
		"RestartMedia":{
			"httpMethod":"POST",
			"summary":"Complete restart the entire job.",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"mediaid":{
					"description":"A unique identifier for each media.",
					"type":"integer",
					"required": true
				}
			}

		},
		"RestartMediaErrors":{
			"httpMethod":"POST",
			"summary":"Only retry tasks ended with error.",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"mediaid":{
					"description":"A unique identifier for each media.",
					"type":"integer",
					"required": true
				}
			}

		},
		"RestartMediaTask":{
			"httpMethod":"POST",
			"summary":"Only restart the specified task (format). Additional parameter <taskid> must be specified.",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"mediaid":{
					"description":"A unique identifier for each media.",
					"type":"integer",
					"required": true
				}
			}
		},
		"StopMedia":{
			"httpMethod":"POST",
			"summary":"Stop media downloading/processing/uploading. If at least one destination is saved, media will be finished, otherwise it will be stopped.",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"mediaid":{
					"description":"A unique identifier for each media.",
					"type":"integer",
					"required": true
				}
			}

		},


		"AddSubUser":{
			"httpMethod":"POST",
			"summary":"Add new sub user.",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"user_data":{
					"description":"This data include the registration information (required), and the contact information(optional) about user.",
					"type":"array",
					"required": true
				}
			}
		},
		"UpdateSubUser":{
			"httpMethod":"POST",
			"summary":"Replace information about existing user's data.",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"action_user_id":{
					"description":"An unique identifier of user.",
					"type":"integer",
					"required": true
				}
			},
			"parameters":{
				"user_data":{
					"description":"This data include the registration information (required), and the contact information(optional) about user.",
					"type":"array",
					"required": true
				}
			}
		},
		"AddTrialUser":{
			"httpMethod":"POST",
			"summary":"Add new Trial user.",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"user_data":{
					"description":"This data include the registration information (required), and the contact information(optional) about user.",
					"type":"array",
					"required": true
				}
			}
		},
		"DeleteUser":{
			"httpMethod":"POST",
			"summary":"Delete specified sub user.",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"action_user_id":{
					"description":"An unique identifier of user.",
					"type":"integer",
					"required": true
				}
			}
		},
		"GetUserInfo":{
			"httpMethod":"POST",
			"summary":"Return information about selected user.",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"action_user_id":{
					"description":"An unique identifier of user.",
					"type":"integer",
					"required": true
				}
			}
		},
		"GetSubUsers":{
			"httpMethod":"POST",
			"summary":"Return list of all users and all its data.",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"action_user_id":{
					"description":"An unique identifier of user.",
					"type":"integer",
					"required": true
				}
			}
		},
		"GetASM":{
			"httpMethod":"POST",
			"summary":"",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"action_user_id":{
					"description":"An unique identifier of user.",
					"type":"integer",
					"required": true
				}
			}
		},
		"GetStorageSpace":{
			"httpMethod":"POST",
			"summary":"",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"action_user_id":{
					"description":"An unique identifier of user.",
					"type":"integer",
					"required": true
				}
			}
		},
		"GetBandwidthStat":{
			"httpMethod":"POST",
			"summary":"",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"action_user_id":{
					"description":"An unique identifier of user.",
					"type":"integer",
					"required": true
				},
				"date_from":{
					"description":"From date in format: YYYY-MM-DD",
					"type":"integer"
				},
				"date_to":{
					"description":"From date in format: YYYY-MM-DD",
					"type":"integer"
				}
			}
		},
		"GetBandwidthStatGroupDate":{
			"httpMethod":"POST",
			"summary":"",
			"class":"\\Gencoding\\Guzzle\\Encoding\\Command\\XmlCommand",
			"parameters":{
				"action_user_id":{
					"description":"An unique identifier of user.",
					"type":"integer",
					"required": true
				},
				"date_from":{
					"description":"From date in format: YYYY-MM-DD",
					"type":"integer"
				},
				"date_to":{
					"description":"From date in format: YYYY-MM-DD",
					"type":"integer"
				}
			}
		}
	}
}